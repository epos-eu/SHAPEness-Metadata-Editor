* Update 06/2020

| # | Name | Description |
|--|--|--|
| 1 | ***Dataset pre-compilation from DOI*** | DataCite is an international initiative meant to enable citation for scientific datasets. To achieve this, DataCite operates a metadata infrastructure, following the same approach used by CrossRef for scientific publications. As such, the DataCite infrastructure is responsible for issuing persistent identifiers (in particular, DOIs) for datasets, and for registering dataset metadata. When creating a new Dataset entity that has a DOI associated, the EPOS Metadata Editor should retrieve the associated metadata and pre-compile the available metadata.<br><br>In addition to describing the dataset itself, the DataCite schema (https://schema.datacite.org/) can provide:<br>- a reference to people involved such as authors, contact points, contributors, each one identified using the ORCID code (https://orcid.org/);<br>- a reference to organizations that publish, or owns, each identified using the ROR code (https://ror.org/);<br>- a reference to related projects that financed the dataset together with the finaning organization;<br>- the (Creative Commons) license associated to the dataset;<br>- a list of related online objects such as dataset or publication, each identified with a specific identifier (e.g. DOI, handle, URI), and each with a specific type of relation (list available at  https://schema.datacite.org/meta/kernel-4.3/include/datacite-relationType-v4.xsd).<br><br>Metadata associated with a DOI can be retrieved in multiple formats with one of the following calls <br><br>XML: https://api.datacite.org/dois/application/vnd.datacite.datacite+xml/ + DOI code<br>https://api.datacite.org/dois/application/vnd.datacite.datacite+xml/10.6092/ingv.it-ahead<br><br> JSON: https://api.datacite.org/dois/application/vnd.datacite.datacite+json/ + DOI code<br>https://api.datacite.org/dois/application/vnd.datacite.datacite+json/10.6092/ingv.it-ahead<br><br>JSON-LD: https://api.datacite.org/dois/application/ld+json/ + DOI code <br><br>The bibliographic citation as well can be retrieved using a DOI and a dedicated field should created to accomodate it. The citation can be rietrieved from https://citation.crosscite.org/<br>Example<br>https://citation.crosscite.org/format?style=pure-and-applied-geophysics&lang=en-US&doi=10.6092/ingv.it-ahead<br><br>In order to implement this functionality we could consider "DataCite to DCAT-AP Mapping" [https://ec-jrc.github.io/datacite-to-dcat-ap/](https://ec-jrc.github.io/datacite-to-dcat-ap/)<br><br>![DataCite_to_DCAT](uploads/25640521f2832d8930f77473bbcc898c/DataCite_to_DCAT.png)|
| 2 | ***GIT module implementation*** | This module will allow users to push EPOS-DCAT-AP RDF/Turtle files to their favourite Git repository. The Metadata Editor will create a specific branch on the repository to avoid security issues. <br>  |
| 3 | ***Improvements/bug fixing guided by the users' feedback*** | Based on the following survey results < |


* Update 04/2020

The table below describes the functionalities available in the EPOS Metadata Editor, and then some screenshots show how these functionalities appear in the GUI. 

| # | Name | Description |
|--|--|--|
| 1 | EPOS-DCAT-AP SHACL file import  | The application allows the user to import EPOS-DCAT-AP SHACL file from URL or local folder through a wizard. |
| 2 | EPOS-DCAT-AP RDF/Turtle file creation from scratch | The application allows the user to create a new EPOS-DCAT-AP RDF/Turtle file through a wizard. |
| 3 | EPOS-DCAT-AP RDF/Turtle file import | The application allows the user to import an existing EPOS-DCAT-AP RDF/Turtle file through a wizard. |
| 4 | Metadata entities Graph representation | The application uses libraries to visualize the metadata entities as a  Graph (with nodes and relationships). |
| 5 | Metadata entities population through nodes creation | The application allows the user to create nodes by using Palette widget (e.g. Drag&Drop, double click, right click) which contains all shapes defined by EPOS-DCAT-AP SHACL constraints. |
| 6 | Metadata entity properties population | The application allows the user to fill in metadata entity properties through table representation, where the properties are grouped by mandatory, recommended and optional as they are defined in EPOS-DCAT-AP SHACL constraints. |
| 7 | SHACL constraints validation | The application uses libraries (Javax and Hibernate) to validate metadata entities against EPOS-DCAT-AP SHACL constraints. |
| 8 | EPOS-DCAT-AP RDF/Turtle file serialization | The application serializes the metadata entities into RDF/Turtle format and allows the user to visualize the file through an RDF/Turtle editor. |
| 9 | EPOS-DCAT-AP RDF/Turtle file export | The application allows the user to export EPOS-DCAT-AP RDF/Turtle file on local folder. |
| 10 | Outline of metadata entities and relationships currently active on graph | The application shows a view, named Outline, in order to display all nodes and relationships on graph. The nodes are grouped according to the shape type and are displayed in a tree-like structure. |
| 11 | Nodes classification through colours| The application assigns a random colour to each shape. The nodes are coloured according to the shape type and the user is able afterwards to customize them. |
| 12 | Java unit tests |Java unit Tests were created in order to test the main functionalities. |
| 13 | Beta test | A beta version was released to a selected group of users to test the application in order to improve it in terms of usability and functionality. The test was performed through a survey, which allowed us to evaluate the current level of satisfaction and also to discover possible bugs. The results have been collected in the following pdf file: [EPOS_Metadata_Editor_survey_results.pdf](uploads/a1b0bb3636c09feddc7bd39dad7e052f/EPOS_Metadata_Editor_survey_results.pdf) |
